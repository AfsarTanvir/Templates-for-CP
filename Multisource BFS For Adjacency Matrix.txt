int multisourceBFS(vector<vector<int>> &grid)
{
    queue<pair<int, int>> q;
    int n = grid.size();    // 6
    int m = grid[0].size(); // 5
    int vis[n][m];
    memset(vis, 0, sizeof(vis));
    // traverse boundary elements
    for (int i = 0; i < n; i++)
    {
        // if it is a land then store it in queue
        if (grid[i][0] == 1)
        {
            q.push({i, 0});
            vis[i][0] = 1;
        }
        if (grid[i][m - 1] == 1)
        {
            q.push({i, m - 1});
            vis[i][m - 1] = 1;
        }
    }
    for (int i = 1; i < m - 1; i++)
    {
        // if it is a land then store it in queue
        if (grid[0][i] == 1)
        {
            q.push({0, i});
            vis[0][i] = 1;
        }
        if (grid[n - 1][i] == 1)
        {
            q.push({n - 1, i});
            vis[n - 1][i] = 1;
        }
    }

    int delrow[] = {-1, 0, +1, 0};
    int delcol[] = {0, +1, +0, -1};

    while (!q.empty())
    {
        int row = q.front().first;
        int col = q.front().second;
        q.pop();

        // traverses all 4 directions
        for (int i = 0; i < 4; i++)
        {
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            // check for valid coordinates and for land cell
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1)
            {
                q.push({nrow, ncol});
                vis[nrow][ncol] = 1;
            }
        }
    }

    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            // check for unvisited land cell
            if (grid[i][j] == 1 && vis[i][j] == 0)
                cnt++;
        }
    }
    return cnt;
}
