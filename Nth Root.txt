// cout << NthRoot(3, 27); answer = 3
int midPowerOfN(int mid, int n, int m)
{
    long long ans = 1;
    for (int i = 1; i <= n; ++i)
    {
        ans *= mid;
        if (ans > m)
            return 2;
    }
    if (ans == m)
        return 1;
    return 0;
}
int NthRoot(int n, int m)
{
    int h = m, l = 1, mid, ans;
    while (l <= h)
    {
        mid = (l + h) >> 1;
        ans = midPowerOfN(mid, n, m);
        // cout << x space mid space n space l space h nl;
        if (ans == 1)
        {
            return mid;
        }
        else if (ans == 0)
        {
            l = mid + 1;
        }
        else
        {
            h = mid - 1;
        }
    }
    return -1;
}
