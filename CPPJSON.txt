C:\Users\t440s\AppData\Roaming\Code\User\snippets\cpp.json



{
    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    "MAIN-C++": {
        "prefix": "MAIN-C++",
        "body": [
            "#include<iostream>\n",
            "using namespace std;\n",
            "int main()",
            "{",
            "\t$0",
            "\treturn 0;",
            "}"
        ],
        "description": "MAIN-C++",
    },
    "ORDERED-SET": {
        "prefix": "ORDERED-SET",
        "body": [
            "#include <ext/pb_ds/assoc_container.hpp>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "// #define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>",
            "template <class T>",
            "using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
            "// ordered_set <ll> s;  --> Declare ordered set",
            "// s.order_of_key(val)  --> Returns the number of elements strictly less than val",
            "// (s.find_by_order(ind)) --> Returns an iterator to the element at the (ind+1)th smallest position",
            "// *(s.find_by_order(ind)) --> Dereferences the iterator to get the actual element value at that position",
            "$0"
        ],
        "description": "Ordered Set with indexed access using order statistics (finds rank and k-th smallest element)",
    },
    "PRINT-NUMBER": {
        "prefix": "PRINT-NUMBER",
        "body": [
            "cout << $1 << \"\\n\";$0",
        ],
        "description": "PRINT-NUMBER",
    },
    "VECTOR-PAIR": {
        "prefix": "VECTOR-PAIR",
        "body": [
            "vector<pair<ll, ll>> vp1(n);$0",
        ],
        "description": "VECTOR-PAIR",
    },
    "PAIR": {
        "prefix": "PAIR",
        "body": [
            "pair<ll, ll>$0",
        ],
        "description": "PAIR",
    },
    "SUM-OF-X-TO-N": {
        "prefix": "SUM-OF-X-TO-N",
        "body": [
            "ll sum_of_x_to_N(ll N, ll X = 1){ --X; __int128_t x1 = ((__int128_t)X * (X + 1)) >> 1; __int128_t x2 = ((__int128_t)N * (N + 1)) >> 1; return (ll)(x2 - x1);}$0",
        ],
        "description": "SUM-OF-X-TO-N",
    },
    "MEMSET": {
        "prefix": "MEMSET",
        "body": [
            "memset($1, -1, sizeof($1));$0",
        ],
        "description": "MEMSET",
    },
    "CONST-INT-N-MOD": {
        "prefix": "CONST-INT-N-MOD",
        "body": [
            "const int N = 2e5 + 5, mod = 1e9 + 7;$0",
        ],
        "description": "CONST-INT-N-MOD",
    },
    "SPACE01": {
        "prefix": "SPACE01",
        "body": [
            " << \" \" << $0",
        ],
        "description": "SPACE01",
    },
    "SPACE02": {
        "prefix": "SPACE02",
        "body": [
            " << \" \";$0",
        ],
        "description": "SPACE02",
    },
    "SPACE03-NEWLINE": {
        "prefix": "SPACE03-NEWLINE",
        "body": [
            " << \"\\n\";$0",
        ],
        "description": "SPACE03-NEWLINE",
    },
    "SPACE04-i-EQUAL-TO-n": {
        "prefix": "SPACE04-i-EQUAL-TO-n",
        "body": [
            " << \" \\n\"[i==n];$0",
        ],
        "description": "SPACE04-i-EQUAL-TO-n",
    },
    "SPACE05-i+1-EQUAL-TO-n": {
        "prefix": "SPACE05-i+1-EQUAL-TO-n",
        "body": [
            " << \" \\n\"[i+1==n];$0",
        ],
        "description": "SPACE05-i+1-EQUAL-TO-n",
    },
    "PRIORITY-QUEUE-GREATER": {
        "prefix": "PRIORITY-QUEUE-GREATER",
        "body": [
            "priority_queue<ll, vector<ll>, greater<ll>> pq1;$0",
        ],
        "description": "PRIORITY-QUEUE-GREATER",
    },
    "SORT-COMPARE": {
        "prefix": "SORT-COMPARE",
        "body": [
            "sort(v1$1.begin(), v1$2.end(), [&](vector<long long> &a, vector<long long> &b){",
            "\treturn a[1]<b[1];",
            "});$0"
        ],
        "description": "SORT-COMPARE",
    },
    "SORT-NORMAL": {
        "prefix": "SORT-NORMAL",
        "body": [
            "sort($1.begin(), $1.end());$0"
        ],
        "description": "SORT-NORMAL",
    },
    "SORT-GREATER": {
        "prefix": "SORT-GREATER",
        "body": [
            "sort($1.begin(), $1.end(), greater());$0"
        ],
        "description": "SORT-GREATER",
    },
    "REVERSE-TEMPLATE": {
        "prefix": "REVERSE-TEMPLATE",
        "body": [
            "reverse($1.begin(), $1.end());$0",
        ],
        "description": "REVERSE-TEMPLATE"
    },
    "MIN-ELEMENT": {
        "prefix": "MIN-ELEMENT",
        "body": [
            "ll mn = *min_element($1.begin(), $1.end());$0",
        ],
        "description": "MIN-ELEMENT"
    },
    "MAX-ELEMENT": {
        "prefix": "MAX-ELEMENT",
        "body": [
            "ll mx = *max_element($1.begin(), $1.end());$0",
        ],
        "description": "MAX-ELEMENT"
    },
    "FIND-MIN-MAX": {
        "prefix": "FIND-MIN-MAX",
        "body": [
            "auto [minIt, maxIt] = minmax_element($1.begin(), $1.end());",
            "int minValue = *minIt, maxValue = *maxIt;$0",
        ],
        "description": "FIND-MIN-MAX"
    },
    "REMOVE-DUPLICATES": {
        "prefix": "REMOVE-DUPLICATES",
        "body": [
            "sort($1.begin(), $1.end());",
            "$1.erase(unique($1.begin(), $1.end()), $1.end());$0",
        ],
        "description": "REMOVE-DUPLICATES"
    },
    "SUM-VECTOR": {
        "prefix": "SUM-VECTOR",
        "body": [
            "ll sum = accumulate($1.begin(), $1.end(), 0LL);$0",
        ],
        "description": "SUM-VECTOR"
    },
    "PREFIX-SUM": {
        "prefix": "PREFIX-SUM",
        "body": [
            "vector<ll> prefixSum($1.size() + 1);",
            "for (int ii = 0; ii < $1.size(); ii++) prefixSum[ii + 1] = prefixSum[ii] + $1[ii];$0",
        ],
        "description": "PREFIX-SUM"
    },
    "TERNARY-OPARATOR": {
        "prefix": "TERNARY-OPARATOR",
        "body": [
            "(($1) ? ($2) : ($3))$0",
        ],
        "description": "TERNARY-OPARATOR",
    },
    "PRINT-STRING": {
        "prefix": "PRINT-STRING",
        "body": [
            "cout << \"$1\" << \"\\n\";$0",
        ],
        "description": "PRINT-STRING",
    },
    "TO-LOWER": {
        "prefix": "TO-LOWER",
        "body": [
            "transform($1.begin(), $1.end(), $1.begin(), ::tolower);$0"
        ],
        "description": "Convert a string to lowercase"
    },
    "TO-UPPER": {
        "prefix": "TO-UPPER",
        "body": [
            "transform($1.begin(), $1.end(), $1.begin(), ::toupper);$0"
        ],
        "description": "Convert a string to uppercase"
    },
    "PRINT-VARIABLE": {
        "prefix": "PRINT-VARIABLE",
        "body": [
            "cout << $1 << \"\\n\" $0;",
        ],
        "description": "PRINT-VARIABLE",
    },
    "FIND-THE-MID": {
        "prefix": "FIND-THE-MID",
        "body": [
            "mid = (high+low)>>1;$0",
        ],
        "description": "FIND-THE-MID",
    },
    "FIND-IN-TEMPLATE": {
        "prefix": "FIND-IN-TEMPLATE",
        "body": [
            "if ($1.find($2) != $1.end()) {",
            "    $3",
            "} else {",
            "    $4",
            "}$0",
        ],
        "description": "FIND-IN-TEMPLATE"
    },
    "COUNT-ELEMENT-FROM-VECTOR": {
        "prefix": "COUNT-ELEMENT-FROM-VECTOR",
        "body": [
            "ll cnt1 = count($1.begin(), $1.end(), $2);$0",
        ],
        "description": "COUNT-ELEMENT-FROM-VECTOR"
    },
    "LOWER-BOUND-FINDING-INDEX": {
        "prefix": "LOWER-BOUND-FINDING-INDEX",
        "body": [
            "ll lb = lower_bound($1.begin(), $1.end(), $2)-$1.begin();$0",
        ],
        "description": "LOWER-BOUND-FINDING-INDEX",
    },
    "UPPER-BOUND-FINDING-INDEX": {
        "prefix": "UPPER-BOUND-FINDING-INDEX",
        "body": [
            "ll ub = upper_bound($1.begin(), $1.end(), $2)-$1.begin();$0",
        ],
        "description": "UPPER-BOUND-FINDING-INDEX",
    },
    "COUNT-IN-RANGE": {
        "prefix": "COUNT-IN-RANGE",
        "body": [
            "int cnt_in_range = upper_bound($1.begin(), $1.end(), $2) - lower_bound($1.begin(), $1.end(), $3);$0",
        ],
        "description": "COUNT-IN-RANGE"
    },
    "COUNT-EVEN-ODD": {
        "prefix": "COUNT-EVEN-ODD",
        "body": [
            "int oddCount = count_if($1.begin(), $1.end(), [](int x) { return x & 1; });",
            "int evenCount = $1.size() - evenCount;$0",
        ],
        "description": "COUNT-EVEN-ODD"
    },
    "GCD": {
        "prefix": "GCD",
        "body": [
            "ll gd = __gcd($1, $2);$0",
        ],
        "description": "GCD"
    },
    "LCM": {
        "prefix": "LCM",
        "body": [
            "ll lm = ($1 / __gcd($1, $2) * $2);$0",
        ],
        "description": "LCM"
    },
    "PRINT-MAP-LAMBDA": {
        "prefix": "PRINT-MAP-LAMBDA",
        "body": [
            "auto printMap = [](const auto& map) {",
            "    cout << \"Printing Map:\\n\";",
            "    for (const auto& [key, value] : map) {",
            "        cout << key << \" -> \" << value << \"\\n\";",
            "    }",
            "    cout << \"------------------------\\n\";",
            "};",
            "printMap($1);$0"
        ],
        "description": "Prints the contents of a map using a lambda function"
    },
    "PRINT-SET-LAMBDA": {
        "prefix": "PRINT-SET-LAMBDA",
        "body": [
            "auto printSet = [](const auto& set) {",
            "    cout << \"Printing Set:\\n\";",
            "    for (const auto& elem : set) {",
            "        cout << elem << \" \";",
            "    }",
            "    cout << \"\\n------------------------\\n\";",
            "};",
            "printSet($1);$0"
        ],
        "description": "Prints the contents of a set using a lambda function"
    },
    "PRINT-2D-VECTOR-LAMBDA": {
        "prefix": "PRINT-2D-VECTOR-LAMBDA",
        "body": [
            "auto printVector = [](const auto& vec) {",
            "    for (const auto& elem : vec) {",
            "        cout << elem << \" \";",
            "    }",
            "    cout << \"\\n\";",
            "};",
            "",
            "auto print2DVector = [&](const auto& vec2D) {",
            "    cout << \"Printing 2D Vector:\\n\";",
            "    for (const auto& vec : vec2D) {",
            "        printVector(vec);",
            "    }",
            "    cout << \"------------------------\\n\";",
            "};",
            "",
            "print2DVector($1);$0"
        ],
        "description": "Prints a 2D vector using nested lambda functions"
    },
    "YES-OUTPUT01": {
        "prefix": "YES-OUTPUT01",
        "body": [
            "cout << \"YES\"$0",
        ],
        "description": "YES-OUTPUT01",
    },
    "YES-OUTPUT02": {
        "prefix": "YES-OUTPUT02",
        "body": [
            "cout << \"Yes\"$0",
        ],
        "description": "YES-OUTPUT02",
    },
    "NO-OUTPUT01": {
        "prefix": "NO-OUTPUT01",
        "body": [
            "cout << \"NO\"$0",
        ],
        "description": "NO-OUTPUT01",
    },
    "NO-OUTPUT02": {
        "prefix": "NO-OUTPUT02",
        "body": [
            "cout << \"No\"$0",
        ],
        "description": "NO-OUTPUT02",
    },
    "PI-NUMBER": {
        "prefix": "PI-NUMBER",
        "body": [
            "#define PI 2.0 * acos(0.0)$0",
        ],
        "description": "PI-NUMBER",
    },
    "SET-PRECISION": {
        "prefix": "SET-PRECISION",
        "body": [
            "cout << setprecision($1) << fixed;$0"
        ],
        "description": "SET-PRECISION"
    },
    "DOUBLE-SETPRECISION": {
        "prefix": "DOUBLE-SETPRECISION",
        "body": [
            "cout << fixed << setprecision(10) << $1 << \"\\n\"$0;"
        ],
        "description": "Fixed value, showed 10 digits after . (period)"
    },
    "BIT-COUNT-LL": {
        "prefix": "BIT-COUNT-LL",
        "body": [
            "int bitcnt = __builtin_popcountll($1)$0"
        ],
        "description": "Count set bits in an long long integer"
    },
    "BIT-COUNT": {
        "prefix": "BIT-COUNT",
        "body": [
            "int bitcnt = __builtin_popcount($1)$0"
        ],
        "description": "Count set bits in an integer"
    },
    "BIT-MSB-POSITION": {
        "prefix": "BIT-MSB-POSITION",
        "body": [
            "int msb_position = std::__lg($1);$0"
        ],
        "description": "Find the position (zero based) of the Most Significant Bit (MSB) using std::__lg()"
    },
    "BIT-CTZ-LL": {
        "prefix": "BIT-CTZ-LL",
        "body": [
            "int cnttralling0 = __builtin_ctzll($1)$0"
        ],
        "description": "Count trailing zeros in a long long integer"
    },
    "BIT-CLZ-LL": {
        "prefix": "BIT-CLZ-LL",
        "body": [
            "int cntleading0 = __builtin_clzll($1)$0"
        ],
        "description": "Count leading zeros in a long long integer"
    },
    "BIT-PARITY-LL": {
        "prefix": "BIT-PARITY-LL",
        "body": [
            "int isoddsetbit = __builtin_parityll($1)$0"
        ],
        "description": "Check if number of set bits in a long long integer is odd"
    },
    "FIND-FIRST-SET": {
        "prefix": "FIND-FIRST-SET",
        "body": [
            "int findindofMSB = __builtin_ffs($1)$0"
        ],
        "description": "returns the 1-based position of the least significant set bit (1) in an integer. If no bits are set, it returns 0"
    },
    "IOTA": {
        "prefix": "IOTA",
        "body": [
            "std::iota($1.begin(), $1.end(), $2);$0"
        ],
        "description": "Fill a range with sequentially increasing values"
    },
    "FILL": {
        "prefix": "FILL",
        "body": [
            "std::fill($1.begin(), $1.end(), $2);$0"
        ],
        "description": "Fill a range with a specific value"
    },
    "PREFIX-SUM-partial_sum": {
        "prefix": "PREFIX-SUM-partial_sum",
        "body": [
            "std::partial_sum($1.begin(), $1.end(), $2);$0"
        ],
        "description": "Prefix sum for(int i=1;i<=n;i++) cin>>v[i]; partial_sum(v.begin(), v.end(), pre.begin());"
    },
    "LOOP-0-N-1": {
        "prefix": "LOOP-0-N-1",
        "body": [
            "for(int $1=0; $1<n; ++$1){",
            "\t$0",
            "}",
        ],
        "description": "LOOP-0-N-1",
    },
    "LOOP-1-N": {
        "prefix": "LOOP-1-N",
        "body": [
            "for(int $1=1; $1<=n; ++$1){",
            "\t$0",
            "}",
        ],
        "description": "LOOP-1-N",
    },
    "INPUT-GRAPH": {
        "prefix": "INPUT-GRAPH",
        "body": [
            "for(i=1;i<n;++i)",
            "{",
            "\tll u,v;",
            "\tcin >> u >> v;",
            "\tgraph[u].push_back(v);",
            "\tgraph[v].push_back(u);",
            "}$0",
        ],
        "description": "INPUT-GRAPH",
    },
    "INPUT-2D-VECTOR": {
        "prefix": "INPUT-2D-VECTOR",
        "body": [
            "vector<vector<int>> $1($2, vector<int>($3));",
            "for (int r = 0; r < $2; r++) {",
            "    for (int c = 0; c < $3; c++) {",
            "        cin >> $1[r][c];",
            "    }",
            "}$0",
        ],
        "description": "Input for 2D vector of size n x m"
    },
    "CP-CONTEST-03": {
        "prefix": "CP-CONTEST-03",
        "body": [
            "#include<bits/stdc++.h>\n",
            "using ll = long long;",
            "using namespace std;",
            "ll T=1,tc=1,i=0,j=1,k,n=1,m,queries;\n\n",
            "int main()",
            "{",
            "ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);",
            "\tll x,y,z,ans=0,cnt=0;",
            "\tbool flag=false;",
            "\tdouble d1=0$2;",
            "\tstring s1$3;",
            "\tcin >> n$4;",
            "\tvector<ll> v1(n)$5;$0",
            "\treturn 0;",
            "}"
        ],
        "description": "CP-CONTEST-03",
    },
    "CP-CONTEST-02": {
        "prefix": "CP-CONTEST-02",
        "body": [
            "#include<bits/stdc++.h>\n",
            "using ll = long long;",
            "using namespace std;",
            "ll T=1,n=1,m,queries;\n\n",
            "void solve()",
            "{",
            "\tll x,y,z,i=0,j=1,k,ans=0,cnt=0;",
            "\tbool flag=true;",
            "\tdouble d1=0;",
            "\tstring s1;",
            "\tcin >> n$2;",
            "\tvector<ll> v1(n)$3;",
            "\tfor(i=0; i<n; ++i){ cin >> v1[i];}$0",
            "}\n\n",
            "int main()",
            "{",
            "\tios_base::sync_with_stdio(false);cin.tie(nullptr);",
            "\t$1cin >> T;",
            "\tfor(int it=1; it<=T; ++it)",
            "\t{",
            "\t\tcout << \"Case \" << it << \": \";",
            "\t\tsolve();",
            "\t\tcout << \"\\n\";",
            "\t}",
            "\treturn 0;",
            "}"
        ],
        "description": "CP-CONTEST-02",
    },
    "CP-CONTEST-01": {
        "prefix": "CP-CONTEST-01",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;\n",
            "using ll = int64_t;",
            "ll T=1,n=1,m,queries;\n\n",
            "void solve()",
            "{",
            "\tll x,y,z,u,v,w,i=0,j=1,k,ans=0,cnt=0;",
            "\tbool flag=true;",
            "\tdouble d1=0;",
            "\tstring s1;",
            "\tcin >> n$2;",
            "\tvector<ll> v1(n$3);",
            "\tfor(i=0; i<n; ++i){ cin >> v1[i];}$0",
            "}\n\n",
            "int main()",
            "{",
            "\tios_base::sync_with_stdio(false), cin.tie(nullptr);",
            "\t$1cin >> T;",
            "\twhile(T--)",
            "\t{",
            "\t\tsolve();",
            "\t\tcout << \"\\n\";",
            "\t}",
            "\treturn 0;",
            "}"
        ],
        "description": "CP-CONTEST-01",
    }
}