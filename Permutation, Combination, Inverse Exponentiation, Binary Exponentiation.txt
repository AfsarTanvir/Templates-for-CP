const int N = 5e5 + 5, mod = 1e9 + 7;
ll fact[N+5];
/*
fact[0] = 1;
for (int i = 1; i < N; ++i)
{
    fact[i] = (fact[i - 1] * i) % mod;
}
*/
long long inverseExponentiation(long long a)
{
    return ((a <= 1) ? (a) : mod - (mod / a) * inverseExponentiation(mod % a) % mod);
}
long long combination(long long n, long long r)
{
    return (fact[n] * inverseExponentiation(fact[r]) % mod) * inverseExponentiation(fact[n - r]) % mod;
}
long long permutation(long long n, long long r)
{
    return (fact[n] * inverseExponentiation(fact[n - r]) % mod);
}
long long binaryExponentiation(long long base, long long power)
{
    long long carry = 1 % mod;
    long long x = base % mod;
    while (power)
    {
        if (power & 1)
            carry = (__int128_t)(carry * x) % mod;
        x = (__int128_t)(x * x) % mod;
        power = power >> 1;
    }
    return carry % mod;
}
